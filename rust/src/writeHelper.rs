#![allow(non_snake_case)]
use anyhow::{ Context, Result };
use hidapi::{ HidDevice };
use phf::phf_map;
use std::ops::Shl;
use std::thread;
use std::time::Duration;

pub static AREA_1_BITS: phf::Map<&'static str, u64> = phf_map! {
    // "Prefixes" => "00 01 02",
    "O_1"      => 97,
    "J_1"      => 96,
    "H_1"      => 95,
    "C_1"      => 94,
    "K_1"      => 93,
    "L_1"      => 92,
    "D_1"      => 91,
    "A_1"      => 90,
    "P_1"      => 89,
    "M_1"      => 88,
    "E_1"      => 87,
    "B_1"      => 86,
    "N_1"      => 85,
    "I_1"      => 84,
    "F_1"      => 83,
    "G_1"      => 82,

    "O_2"      => 81,
    "J_2"      => 80,
    "H_2"      => 79,
    "C_2"      => 78,
    "K_2"      => 77,
    "L_2"      => 76,
    "D_2"      => 75,
    "A_2"      => 74,
    "P_2"      => 73,
    "M_2"      => 72,
    "E_2"      => 71,
    "B_2"      => 70,
    "N_2"      => 69,
    "I_2"      => 68,
    "F_2"      => 67,
    "G_2"      => 66,

    "E_3"      => 65,
    "G_3"      => 64,
    "F_3"      => 63,
    "D_3"      => 62,
    "C_3"      => 61,
    "B_3"      => 60,
    "A_3"      => 59,

    "E_4"      => 58,
    "G_4"      => 57,
    "F_4"      => 56,
    "D_4"      => 55,
    "C_4"      => 54,
    "B_4"      => 53,
    "A_4"      => 52,

    "E_5"      => 51,
    "G_5"      => 50,
    "F_5"      => 40,
    "D_5"      => 39,
    "C_5"      => 38,
    "B_5"      => 37,
    "A_5"      => 36,

    "E_6"      => 35,
    "G_6"      => 34,
    "F_6"      => 33,
    "D_6"      => 32,
    "C_6"      => 31,
    "B_6"      => 30,
    "A_6"      => 29,

    "E_7"      => 28,
    "G_7"      => 27,
    "F_7"      => 26,
    "D_7"      => 25,
    "C_7"      => 24,
    "B_7"      => 23,
    "A_7"      => 22,

    "E_8"      => 21,
    "G_8"      => 20,
    "F_8"      => 19,
    "D_8"      => 18,
    "C_8"      => 17,
    "B_8"      => 16,
    "A_8"      => 15,

    "E_9"      => 14,
    "G_9"      => 13,
    "F_9"      => 12,
    "D_9"      => 11,
    "C_9"      => 10,
    "B_9"      => 9,
    "A_9"      => 8,
};

pub static ODU_BITS: phf::Map<&'static str, &'static str> = phf_map! {
    "Prefixes_1" => "04 05 06",
    "Prefixes_2" => "08 09 0a",
    "Prefixes_3" => "0c 0d 0e",
    "Prefixes_4" => "10 11 12",
    "Prefixes_5" => "14 15 16",
    ":"        => "1000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "O_1"      => "0000 1000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "J_1"      => "0000 0100 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "H_1"      => "0000 0010 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "C_1"      => "0000 0001 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "K_1"      => "0000 0000 1000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "L_1"      => "0000 0000 0100 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "D_1"      => "0000 0000 0010 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "A_1"      => "0000 0000 0001 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "P_1"      => "0000 0000 0000 1000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "M_1"      => "0000 0000 0000 0100 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "E_1"      => "0000 0000 0000 0010 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "B_1"      => "0000 0000 0000 0001 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "N_1"      => "0000 0000 0000 0000 1000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "I_1"      => "0000 0000 0000 0000 0100 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "F_1"      => "0000 0000 0000 0000 0010 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "G_1"      => "0000 0000 0000 0000 0001 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",

    "O_2"      => "0000 0000 0000 0000 0000 1000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "J_2"      => "0000 0000 0000 0000 0000 0100 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "H_2"      => "0000 0000 0000 0000 0000 0010 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "C_2"      => "0000 0000 0000 0000 0000 0001 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "K_2"      => "0000 0000 0000 0000 0000 0000 1000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "L_2"      => "0000 0000 0000 0000 0000 0000 0100 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "D_2"      => "0000 0000 0000 0000 0000 0000 0010 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "A_2"      => "0000 0000 0000 0000 0000 0000 0001 0000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "P_2"      => "0000 0000 0000 0000 0000 0000 0000 1000  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "M_2"      => "0000 0000 0000 0000 0000 0000 0000 0100  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "E_2"      => "0000 0000 0000 0000 0000 0000 0000 0010  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "B_2"      => "0000 0000 0000 0000 0000 0000 0000 0001  0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "N_2"      => "0000 0000 0000 0000 0000 0000 0000 0000  1000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "I_2"      => "0000 0000 0000 0000 0000 0000 0000 0000  0100 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "F_2"      => "0000 0000 0000 0000 0000 0000 0000 0000  0010 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "G_2"      => "0000 0000 0000 0000 0000 0000 0000 0000  0001 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",

    "O_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 1000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "J_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0100 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "H_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0010 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "C_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0001 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "K_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 1000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "L_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0100 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "D_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0010 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "A_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0001 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "P_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 1000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "M_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0100 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "E_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0010 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "B_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0001 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "N_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 1000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "I_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0100 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "F_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0010 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "G_3"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0001 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",

    "O_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 1000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "J_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0100 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "H_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0010 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "C_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0001 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "K_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 1000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "L_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0100 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "D_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0010 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "A_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0001 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "P_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 1000  0000 0000 0000 0000 0000 0000 0000 0000",
    "M_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0100  0000 0000 0000 0000 0000 0000 0000 0000",
    "E_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0010  0000 0000 0000 0000 0000 0000 0000 0000",
    "B_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0001  0000 0000 0000 0000 0000 0000 0000 0000",
    "N_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  1000 0000 0000 0000 0000 0000 0000 0000",
    "I_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0100 0000 0000 0000 0000 0000 0000 0000",
    "F_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0010 0000 0000 0000 0000 0000 0000 0000",
    "G_4"      => "0000 0000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000  0001 0000 0000 0000 0000 0000 0000 0000",
};

pub static COMMS_BITS: phf::Map<&'static str, &'static str> = phf_map! {
    "Prefixes" => "16 17",
    "N_Left"  => "0000 1000 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "P_Left"  => "0000 0100 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "L_Left"  => "0000 0010 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "O_Left"  => "0000 0001 0000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "M_Left"  => "0000 0000 1000 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "I_Left"  => "0000 0000 0100 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "K_Left"  => "0000 0000 0010 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "J_Left"  => "0000 0000 0001 0000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "G_Left"  => "0000 0000 0000 1000 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "F_Left"  => "0000 0000 0000 0100 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "H_Left"  => "0000 0000 0000 0010 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "C_Left"  => "0000 0000 0000 0001 0000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "B_Left"  => "0000 0000 0000 0000 1000 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "E_Left"  => "0000 0000 0000 0000 0100 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "D_Left"  => "0000 0000 0000 0000 0010 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "A_Left"  => "0000 0000 0000 0000 0001 0000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",

    "N_Right" => "0000 0000 0000 0000 0000 1000 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "P_Right" => "0000 0000 0000 0000 0000 0100 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "L_Right" => "0000 0000 0000 0000 0000 0010 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "O_Right" => "0000 0000 0000 0000 0000 0001 0000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "M_Right" => "0000 0000 0000 0000 0000 0000 1000 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "I_Right" => "0000 0000 0000 0000 0000 0000 0100 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "K_Right" => "0000 0000 0000 0000 0000 0000 0010 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "J_Right" => "0000 0000 0000 0000 0000 0000 0001 0000  0000 0000 0000 0000 0000 0000 0000 0000",
    "G_Right" => "0000 0000 0000 0000 0000 0000 0000 1000  0000 0000 0000 0000 0000 0000 0000 0000",
    "F_Right" => "0000 0000 0000 0000 0000 0000 0000 0100  0000 0000 0000 0000 0000 0000 0000 0000",
    "H_Right" => "0000 0000 0000 0000 0000 0000 0000 0010  0000 0000 0000 0000 0000 0000 0000 0000",
    "C_Right" => "0000 0000 0000 0000 0000 0000 0000 0001  0000 0000 0000 0000 0000 0000 0000 0000",
    "B_Right" => "0000 0000 0000 0000 0000 0000 0000 0000  1000 0000 0000 0000 0000 0000 0000 0000",
    "E_Right" => "0000 0000 0000 0000 0000 0000 0000 0000  0100 0000 0000 0000 0000 0000 0000 0000",
    "D_Right" => "0000 0000 0000 0000 0000 0000 0000 0000  0010 0000 0000 0000 0000 0000 0000 0000",
    "A_Right" => "0000 0000 0000 0000 0000 0000 0000 0000  0001 0000 0000 0000 0000 0000 0000 0000",
};


fn parse_hex_line(line: &str) -> Result<Vec<u8>> {
    // Strip comments after '#'
    let s = line.split('#').next().unwrap_or("").trim();
    if s.is_empty() {
        return Ok(Vec::new());
    }

    let mut bytes = Vec::new();

    // If the line has separators, parse token-by-token
    if s.chars().any(|c| c.is_whitespace() || c == ',') {
        for tok in s.split(|c: char| c.is_whitespace() || c == ',') {
            if tok.is_empty() { continue; }
            let t = tok.strip_prefix("0x").or_else(|| tok.strip_prefix("0X")).unwrap_or(tok);
            anyhow::ensure!(t.len() <= 2, "Token '{tok}' is not a single byte");
            let b = u8::from_str_radix(t, 16)
                .with_context(|| format!("Invalid hex token '{tok}'"))?;
            bytes.push(b);
        }
    } else {
        // No separators: parse as contiguous hex pairs
        let t = s.strip_prefix("0x").or_else(|| s.strip_prefix("0X")).unwrap_or(s);
        anyhow::ensure!(t.len() % 2 == 0, "Hex string must have even length");
        for i in (0..t.len()).step_by(2) {
            let pair = &t[i..i + 2];
            let b = u8::from_str_radix(pair, 16)
                .with_context(|| format!("Invalid hex pair '{pair}'"))?;
            bytes.push(b);
        }
    }

    Ok(bytes)
}

// TODO: Make types for this
pub fn segments_to_bits(segments: Vec<String>, area: String) -> u64 {
    let area_lut = match area.as_str() {
        "AREA_1" => &AREA_1_BITS,
        _ => panic!(),
    };

    let mut bits: u64 = 0;
    for segment in segments {
        let shift_amount = area_lut.get(&segment).unwrap();
        let mut num = 1;
        num = std::ops::S
        // bits |= num;
        println!("{:?}", shift_amount);
    }
    bits
}

pub fn update_area_1(text: &String){

}

pub fn send_hex_string(device: &HidDevice, hex_lines: Vec<String>, delay_secs: f32) -> Result<usize> {
    let mut sent = 0usize;

    for line in hex_lines {
        let line = line.trim();
        if line.is_empty() || line.starts_with('#') {
            continue;
        }

        let buf = parse_hex_line(line)?;
        if buf.is_empty() {
            continue;
        }

        // Write raw bytes (what `HidDevice::write` expects)
        let _n = device.write(&buf)?;
        sent += 1;

        thread::sleep(Duration::from_secs_f32(delay_secs));
    }

    Ok(sent)
}
